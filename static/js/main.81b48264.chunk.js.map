{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","App.js","index.js"],"names":["TodoItem","todo","statusToogler","className","completed","type","onChange","id","checked","title","TodoList","todos","map","key","TodoApp","useState","todoTitle","setTodoTitle","setTodos","toggleAll","setToggleAll","completedCount","setCompletedCount","useEffect","every","filter","length","onSubmit","event","preventDefault","Date","trim","placeholder","target","value","htmlFor","todoId","updatedTodos","href","ReactDOM","render","App","document","getElementById"],"mappings":"2SAGaA,EAAW,SAAC,GAAD,IACpBC,EADoB,EACpBA,KACAC,EAFoB,EAEpBA,cAFoB,OAItB,wBACEC,UAAWF,EAAKG,UAAY,YAAc,IAE1C,yBAAKD,UAAU,QACb,2BACEE,KAAK,WACLF,UAAU,SACVG,SAAU,kBAAMJ,EAAcD,EAAKM,KACnCC,QAASP,EAAKG,YAEhB,+BAAQH,EAAKQ,OACb,4BAAQJ,KAAK,SAASF,UAAU,aAElC,2BAAOE,KAAK,OAAOF,UAAU,WChBpBO,EAAW,SAAC,GAAD,IACpBC,EADoB,EACpBA,MACAT,EAFoB,EAEpBA,cAFoB,OAItB,wBAAIC,UAAU,aACXQ,EAAMC,KAAI,SAAAX,GAAI,OACb,kBAAC,EAAD,CACEY,IAAKZ,EAAKM,GACVN,KAAMA,EACNC,cAAeA,SC4FRY,MAtGf,WAAoB,IAAD,EACiBC,mBAAS,IAD1B,mBACVC,EADU,KACCC,EADD,OAESF,mBAAS,IAFlB,mBAEVJ,EAFU,KAEHO,EAFG,OAGiBH,oBAAS,GAH1B,mBAGVI,EAHU,KAGCC,EAHD,OAI2BL,mBAAS,GAJpC,mBAIVM,EAJU,KAIMC,EAJN,KAoCjB,OAlBAC,qBAAU,WACRH,EAAaT,EAAMa,OAAM,SAAAvB,GAAI,OAAIA,EAAKG,cACtCkB,EAAkBX,EAAMc,QAAO,SAAAxB,GAAI,OAAKA,EAAKG,aAAWsB,UACvD,CAACf,IAgBF,6BAASR,UAAU,WACjB,4BAAQA,UAAU,UAChB,qCACA,0BAAMwB,SAjBS,SAACC,GACpBA,EAAMC,iBACNX,EAAS,GAAD,mBACHP,GADG,CAEN,CACEJ,IAAK,IAAIuB,KACTrB,MAAOO,EAAUe,OACjB3B,WAAW,MAGfa,EAAa,MAQP,2BACEZ,KAAK,OACLF,UAAU,WACV6B,YAAY,yBACZ1B,SAAU,SAAAsB,GAAK,OAAIX,EAAaW,EAAMK,OAAOC,QAC7CA,MAAOlB,MAKb,6BAASb,UAAU,QACjB,2BACEE,KAAK,WACLE,GAAG,aACHJ,UAAU,aACVK,QAASW,EACTb,SAAU,WACRc,GAAcD,GACdD,EAASP,EAAMC,KAAI,SAAAX,GAAI,kCAClBA,GADkB,IAErBG,WAAYH,EAAKG,mBAIvB,2BAAO+B,QAAQ,cAAf,wBAEA,kBAAC,EAAD,CACExB,MAAOA,EACPO,SAAUA,EACVhB,cAhER,SAAuBkC,GACrB,IAAMC,EAAe1B,EAAMC,KAAI,SAACX,GAC9B,OAAIA,EAAKM,KAAO6B,EACPnC,EAGF,2BAAKA,GAAZ,IAAkBG,WAAYH,EAAKG,eAGrCc,EAASmB,OA2DP,4BAAQlC,UAAU,UAChB,0BAAMA,UAAU,cACbkB,EACA,eAGH,wBAAIlB,UAAU,WACZ,4BACE,uBAAGmC,KAAK,KAAKnC,UAAU,YAAvB,QAGF,4BACE,uBAAGmC,KAAK,YAAR,WAGF,4BACE,uBAAGA,KAAK,eAAR,eAIJ,4BAAQjC,KAAK,SAASF,UAAU,mBAAhC,sBCxFRoC,IAASC,OACP,kBAACC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.81b48264.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoItem = (\n  { todo,\n    statusToogler },\n) => (\n  <li\n    className={todo.completed ? 'completed' : ''}\n  >\n    <div className=\"view\">\n      <input\n        type=\"checkbox\"\n        className=\"toggle\"\n        onChange={() => statusToogler(todo.id)}\n        checked={todo.completed}\n      />\n      <label>{todo.title}</label>\n      <button type=\"button\" className=\"destroy\" />\n    </div>\n    <input type=\"text\" className=\"edit\" />\n  </li>\n);\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({ id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired }).isRequired,\n  statusToogler: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = (\n  { todos,\n    statusToogler },\n) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <TodoItem\n        key={todo.id}\n        todo={todo}\n        statusToogler={statusToogler}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf({ id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired }).isRequired,\n  statusToogler: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport { TodoList } from './components/TodoList';\n\nfunction TodoApp() {\n  const [todoTitle, setTodoTitle] = useState('');\n  const [todos, setTodos] = useState([]);\n  const [toggleAll, setToggleAll] = useState(false);\n  const [completedCount, setCompletedCount] = useState(0);\n\n  function statusToogler(todoId) {\n    const updatedTodos = todos.map((todo) => {\n      if (todo.id !== todoId) {\n        return todo;\n      }\n\n      return { ...todo, completed: !todo.completed };\n    });\n\n    setTodos(updatedTodos);\n  }\n\n  useEffect(() => {\n    setToggleAll(todos.every(todo => todo.completed));\n    setCompletedCount(todos.filter(todo => !todo.completed).length);\n  }, [todos]);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setTodos([\n      ...todos,\n      {\n        id: +new Date(),\n        title: todoTitle.trim(),\n        completed: false,\n      },\n    ]);\n    setTodoTitle('');\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            onChange={event => setTodoTitle(event.target.value)}\n            value={todoTitle}\n          />\n        </form>\n      </header>\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          checked={toggleAll}\n          onChange={() => {\n            setToggleAll(!toggleAll);\n            setTodos(todos.map(todo => ({\n              ...todo,\n              completed: !todo.completed,\n            })));\n          }}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n        <TodoList\n          todos={todos}\n          setTodos={setTodos}\n          statusToogler={statusToogler}\n        />\n      </section>\n\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {completedCount}\n          {' items left'}\n        </span>\n\n        <ul className=\"filters\">\n          <li>\n            <a href=\"#/\" className=\"selected\">All</a>\n          </li>\n\n          <li>\n            <a href=\"#/active\">Active</a>\n          </li>\n\n          <li>\n            <a href=\"#/completed\">Completed</a>\n          </li>\n        </ul>\n\n        <button type=\"button\" className=\"clear-completed\">\n          Clear completed\n        </button>\n      </footer>\n    </section>\n  );\n}\n\nexport default TodoApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}