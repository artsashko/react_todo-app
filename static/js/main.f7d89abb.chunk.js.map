{"version":3,"sources":["components/TodoItem.js","constants.js","components/TodoList.js","components/TodoFilters.js","App.js","index.js"],"names":["TodoItem","todo","deleteTodo","editTodosTitle","statusToogler","useState","editedTitle","setEditedTitle","editing","setEditing","editNonEmptyTitle","id","className","classNames","completed","type","onChange","checked","onDoubleClick","title","onClick","autoFocus","defaultValue","onKeyDown","event","key","target","value","onBlur","FILTERS","all","active","TodoList","todos","setTodos","filter","todoId","updatedTodos","map","defaultProps","TodoFilters","currentFilter","getFilter","Object","values","href","toLowerCase","App","todoTitle","setTodoTitle","toggleAll","setToggleAll","setFilter","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","onSubmit","preventDefault","newTodo","Date","trim","placeholder","every","htmlFor","length","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f7d89abb.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const TodoItem = (\n  { todo,\n    deleteTodo,\n    editTodosTitle,\n    statusToogler },\n) => {\n  const [editedTitle, setEditedTitle] = useState('');\n  const [editing, setEditing] = useState(false);\n\n  const editNonEmptyTitle = () => {\n    if (editedTitle) {\n      editTodosTitle(todo.id, editedTitle);\n      setEditing(false);\n    }\n  };\n\n  const handleSubmit = (event) => {\n    if (event.key === 'Enter') {\n      editNonEmptyTitle();\n    }\n\n    if (event.key === 'Escape') {\n      setEditing(false);\n    }\n  };\n\n  const outFocused = () => {\n    editNonEmptyTitle();\n    setEditing(false);\n  };\n\n  return (\n    <li\n      className={classNames({\n        completed: todo.completed,\n        editing,\n      })}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          onChange={() => statusToogler(todo.id)}\n          checked={todo.completed}\n        />\n        <label onDoubleClick={() => setEditing(true)}>\n          {todo.title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => deleteTodo(todo.id)}\n        />\n      </div>\n      {editing && (\n        <input\n          autoFocus\n          type=\"text\"\n          className=\"edit\"\n          defaultValue={todo.title}\n          onKeyDown={handleSubmit}\n          onChange={event => setEditedTitle(event.target.value)}\n          onBlur={outFocused}\n        />\n      )}\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({ id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired }).isRequired,\n  statusToogler: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  editTodosTitle: PropTypes.func.isRequired,\n};\n","export const FILTERS = {\n  all: 'All',\n  active: 'Active',\n  completed: 'Completed',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\nimport { FILTERS } from '../constants';\n\nexport const TodoList = (\n  { todos,\n    setTodos,\n    filter },\n) => {\n  const statusToogler = (todoId) => {\n    const updatedTodos = todos.map((todo) => {\n      if (todo.id === todoId) {\n        return { ...todo,\n          completed: !todo.completed };\n      }\n\n      return todo;\n    });\n\n    setTodos(updatedTodos);\n  };\n\n  const editTodosTitle = (todoId, title) => {\n    const updatedTodos = todos.map((todo) => {\n      if (todo.id === todoId) {\n        return { ...todo, title };\n      }\n\n      return todo;\n    });\n\n    setTodos(updatedTodos);\n  };\n\n  const deleteTodo = (todoId) => {\n    setTodos(todos.filter(todo => todo.id !== todoId));\n  };\n\n  if (!todos) {\n    return null;\n  }\n\n  return (\n    <ul className=\"todo-list\">\n      {todos.filter((todo) => {\n        switch (filter) {\n          case (FILTERS.active):\n            return !todo.completed;\n          case (FILTERS.completed):\n            return todo.completed;\n          default:\n            return todo;\n        }\n      })\n        .map(todo => (\n          <TodoItem\n            key={todo.id}\n            todo={todo}\n            deleteTodo={deleteTodo}\n            statusToogler={statusToogler}\n            editTodosTitle={editTodosTitle}\n          />\n        ))}\n    </ul>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object.isRequired),\n  setTodos: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n};\n\nTodoList.defaultProps = {\n  todos: null,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FILTERS } from '../constants';\n\nexport const TodoFilters = ({ currentFilter, getFilter }) => (\n  <ul className=\"filters\">\n    {Object.values(FILTERS).map(filter => (\n      <li key={filter}>\n        <a\n          href={currentFilter === FILTERS.all\n            ? `#/`\n            : `#/${currentFilter.toLowerCase()}`}\n          className={currentFilter === filter ? 'selected' : ''}\n          onClick={() => getFilter(filter)}\n        >\n          {filter}\n        </a>\n      </li>\n    ))}\n  </ul>\n);\n\nTodoFilters.propTypes = {\n  currentFilter: PropTypes.string.isRequired,\n  getFilter: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilters } from './components/TodoFilters';\nimport { FILTERS } from './constants';\n\nfunction App() {\n  const [todoTitle, setTodoTitle] = useState('');\n  const [todos, setTodos] = useState(null);\n  const [toggleAll, setToggleAll] = useState(false);\n  const [filter, setFilter] = useState(FILTERS.all);\n\n  useEffect(() => {\n    if (JSON.parse(localStorage.getItem('todos'))) {\n      setTodos(JSON.parse(localStorage.getItem('todos')));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const addTodo = (event) => {\n    event.preventDefault();\n    const newTodo = {\n      id: +new Date(),\n      title: todoTitle.trim(),\n      completed: false,\n    };\n\n    if (todoTitle && todos) {\n      setTodos([\n        ...todos,\n        newTodo,\n      ]);\n      setTodoTitle('');\n    } else if (todoTitle) {\n      setTodos([newTodo]);\n      setTodoTitle('');\n    }\n  };\n\n  function deleteCompleted() {\n    setTodos(todos.filter(todo => !todo.completed));\n  }\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <form onSubmit={addTodo}>\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            onChange={event => setTodoTitle(event.target.value)}\n            value={todoTitle}\n          />\n        </form>\n      </header>\n\n      <section className=\"main\">\n        {todos && (\n          <>\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              checked={todos.every(todo => todo.completed)}\n              onChange={() => {\n                setToggleAll(!toggleAll);\n                setTodos(todos.map(todo => ({\n                  ...todo,\n                  completed: !todo.completed,\n                })));\n              }}\n            />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          </>\n        )}\n\n        <TodoList\n          todos={todos}\n          setTodos={setTodos}\n          filter={filter}\n        />\n      </section>\n\n      {todos && (\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {todos.filter(todo => !todo.completed).length}\n            {' items left'}\n          </span>\n\n          <TodoFilters\n            currentFilter={filter}\n            getFilter={setFilter}\n          />\n\n          {todos.find(todo => todo.completed) && (\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={deleteCompleted}\n            >\n              Clear completed\n            </button>\n          )}\n        </footer>\n      )}\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}