{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","constants.js","components/TodoFilters.js","App.js","index.js"],"names":["TodoItem","todo","deleteTodo","todoStatusToggle","editTodoTitle","useState","editedTitle","setEditedTitle","editing","setEditing","handleEditTitle","id","className","classNames","completed","type","onChange","checked","onDoubleClick","title","onClick","autoFocus","defaultValue","onKeyDown","event","key","target","value","trimLeft","onBlur","TodoList","todos","map","defaultProps","FILTERS","all","active","TodoFilters","currentFilter","getFilter","Object","values","filter","href","toLowerCase","App","todoTitle","setTodoTitle","setTodos","setFilter","completedTodosCount","length","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","useCallback","todoId","updatedTodos","toggleTodos","deleteCompleted","preparedTodos","useMemo","unfilteredTodos","item","filteredTodos","onSubmit","preventDefault","newTodo","Date","trim","placeholder","every","htmlFor","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fa8ec52f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const TodoItem = (\n  { todo,\n    deleteTodo,\n    todoStatusToggle,\n    editTodoTitle },\n) => {\n  const [editedTitle, setEditedTitle] = useState('');\n  const [editing, setEditing] = useState(false);\n\n  const handleEditTitle = () => {\n    if (editedTitle) {\n      editTodoTitle(todo.id, editedTitle);\n      setEditing(false);\n    } else {\n      deleteTodo(todo.id);\n    }\n  };\n\n  const handleSubmit = (event) => {\n    if (event.key === 'Enter') {\n      handleEditTitle();\n    }\n\n    if (event.key === 'Escape') {\n      setEditing(false);\n    }\n  };\n\n  const outFocused = () => {\n    handleEditTitle();\n    if (!editedTitle) {\n      deleteTodo(todo.id);\n    }\n\n    setEditing(false);\n  };\n\n  return (\n    <li\n      className={classNames({\n        completed: todo.completed,\n        editing,\n      })}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          onChange={() => todoStatusToggle(todo.id)}\n          checked={todo.completed}\n        />\n        <label onDoubleClick={() => setEditing(true)}>\n          {todo.title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => deleteTodo(todo.id)}\n        />\n      </div>\n      {editing && (\n        <input\n          autoFocus\n          type=\"text\"\n          className=\"edit\"\n          defaultValue={todo.title}\n          onKeyDown={handleSubmit}\n          onChange={event => setEditedTitle(event.target.value.trimLeft())}\n          onBlur={outFocused}\n        />\n      )}\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({ id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired }).isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  editTodoTitle: PropTypes.func.isRequired,\n  todoStatusToggle: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = (\n  { deleteTodo,\n    todos,\n    todoStatusToggle,\n    editTodoTitle },\n) => {\n  if (!todos) {\n    return null;\n  }\n\n  return (\n    <ul className=\"todo-list\">\n      {todos\n        .map(todo => (\n          <TodoItem\n            key={todo.id}\n            todo={todo}\n            deleteTodo={deleteTodo}\n            todoStatusToggle={todoStatusToggle}\n            editTodoTitle={editTodoTitle}\n          />\n        ))}\n    </ul>\n  );\n};\n\nTodoList.propTypes = {\n  deleteTodo: PropTypes.func.isRequired,\n  todoStatusToggle: PropTypes.func.isRequired,\n  editTodoTitle: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.object.isRequired),\n};\nTodoList.defaultProps = {\n  todos: [],\n};\n","export const FILTERS = {\n  all: 'All',\n  active: 'Active',\n  completed: 'Completed',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FILTERS } from '../constants';\n\nexport const TodoFilters = ({ currentFilter, getFilter }) => (\n  <ul className=\"filters\">\n    {Object.values(FILTERS).map(filter => (\n      <li key={filter}>\n        <a\n          href={currentFilter === FILTERS.all\n            ? `#/`\n            : `#/${currentFilter.toLowerCase()}`}\n          className={currentFilter === filter ? 'selected' : ''}\n          onClick={() => getFilter(filter)}\n        >\n          {filter}\n        </a>\n      </li>\n    ))}\n  </ul>\n);\n\nTodoFilters.propTypes = {\n  currentFilter: PropTypes.string.isRequired,\n  getFilter: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilters } from './components/TodoFilters';\nimport { FILTERS } from './constants';\n\nfunction App() {\n  const [todoTitle, setTodoTitle] = useState('');\n  const [todos, setTodos] = useState(null);\n  const [filter, setFilter] = useState(FILTERS.all);\n  const completedTodosCount = todos\n    ? todos.filter(todo => !todo.completed).length : 0;\n\n  useEffect(() => {\n    if (JSON.parse(localStorage.getItem('todos'))) {\n      setTodos(JSON.parse(localStorage.getItem('todos')));\n    }\n  }, []);\n\n  useEffect(() => {\n    if (todos && todos.length === 0) {\n      setTodos(null);\n    }\n\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const addTodo = (event) => {\n    event.preventDefault();\n\n    if (todoTitle === ' ') {\n      return;\n    }\n\n    const newTodo = {\n      id: +new Date(),\n      title: todoTitle.trim(),\n      completed: false,\n    };\n\n    if (todoTitle && todos) {\n      setTodos([\n        ...todos,\n        newTodo,\n      ]);\n      setTodoTitle('');\n    } else if (!todos) {\n      setTodos([newTodo]);\n      setTodoTitle('');\n    }\n  };\n\n  const todoStatusToggle = useCallback(\n    (todoId) => {\n      const updatedTodos = todos.map((todo) => {\n        if (todo.id === todoId) {\n          return { ...todo,\n            completed: !todo.completed };\n        }\n\n        return todo;\n      });\n\n      setTodos(updatedTodos);\n    }, [todos],\n  );\n\n  const editTodoTitle = useCallback(\n    (todoId, title) => {\n      const updatedTodos = todos.map((todo) => {\n        if (todo.id === todoId) {\n          return { ...todo,\n            title };\n        }\n\n        return todo;\n      });\n\n      setTodos(updatedTodos);\n    }, [todos],\n  );\n\n  const toggleTodos = useCallback(\n    (event) => {\n      setTodos(todos.map(todo => ({\n        ...todo,\n        completed: event.target.checked,\n      })));\n    }, [todos],\n  );\n\n  const deleteCompleted = useCallback(\n    () => {\n      setTodos(todos.filter(todo => !todo.completed));\n    }, [todos],\n  );\n\n  const deleteTodo = useCallback(\n    (todoId) => {\n      setTodos(todos.filter(todo => todo.id !== todoId));\n    }, [todos],\n  );\n\n  const filteredTodos = (unfilteredTodos, currentFilter) => {\n    if (unfilteredTodos) {\n      switch (currentFilter) {\n        case FILTERS.active:\n          return unfilteredTodos.filter(item => !item.completed);\n        case FILTERS.completed:\n          return unfilteredTodos.filter(item => item.completed);\n        default:\n          return unfilteredTodos;\n      }\n    }\n\n    return unfilteredTodos;\n  };\n\n  const preparedTodos = useMemo(\n    () => filteredTodos(todos, filter),\n    [todos, filter],\n  );\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <form onSubmit={addTodo}>\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            onChange={event => setTodoTitle(event.target.value)}\n            value={todoTitle.trimLeft()}\n          />\n        </form>\n      </header>\n\n      <section className=\"main\">\n        {todos && (\n          <>\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              checked={todos.every(todo => todo.completed)}\n              onChange={toggleTodos}\n            />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          </>\n        )}\n\n        <TodoList\n          setTodos={setTodos}\n          todos={preparedTodos}\n          todoStatusToggle={todoStatusToggle}\n          editTodoTitle={editTodoTitle}\n          deleteTodo={deleteTodo}\n        />\n      </section>\n\n      {todos && (\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {completedTodosCount}\n            {completedTodosCount === 1 ? ' item left' : ' items left'}\n          </span>\n\n          <TodoFilters\n            currentFilter={filter}\n            getFilter={setFilter}\n          />\n\n          {todos.find(todo => todo.completed) && (\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={deleteCompleted}\n            >\n              Clear completed\n            </button>\n          )}\n        </footer>\n      )}\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}